#!/usr/bin/env node

const args = require('minimist')(process.argv.slice(2));
const fetch = require('node-fetch');
const fs = require('fs');
const git = require('simple-git')();
const package = require('./package.json');
const semver = require('semver');

const branches = args.branches || ['main', 'master', 'develop'];
const run = args.run !== undefined ? args.run : false;


function usage(message) {
  if (message && !run) { return console.log(message) }
  console.log('');
  console.log(`${package.name} v${package.version}`);
  console.log('');
  if (message) {
    console.log(`  ${message}`);
    console.log('');
  }
  console.log('usage: unchain [options]');
  console.log('');
  console.log('  options:');
  console.log('');
  console.log('    --run          | actually perform the release');
  console.log('    --asset <path> | include an asset in the release');
  console.log('');
  process.exit(1);
}

async function preflight() {
  const results = {};

  const branch = await git.branch();
  if (!branches.includes(branch.current)) { usage(`must be on one of these branches: ${branches.join(', ')}`) }

  await git.fetch();

  const status = await git.status();
  if (status.ahead || status.behind || status.staged.length || status.files.length) { usage(`branch is not clean`) }

  const tags = await git.tags();
  if (!tags.latest) { usage(`could not determine latest tag`) }
  results.tag = tags.latest;

  const logs = await git.log({from: tags.latest, to: 'HEAD'});
  if (logs.all.length === 0) { usage(`no commits since last release`) }
  results.logs = logs.all;

  return results;
}

function showReleaseInfo() {
}

(async () => {

  if (args.help) { usage() }

  await git.init();

  const info = await preflight();

  console.log(`current version: ${package.version}`);
  console.log(`latest tag: ${info.tag}`);

  console.log('Release Notes:');
  info.logs.map(log => { console.log(`  ${log.message}`) });

  const version = semver.inc(package.version, 'patch');
  console.log(`new version: ${version}`);

  package.version = version;
  // if (args.run) {
    fs.writeFileSync('package.json', `${JSON.stringify(package, null, 2)}\n`);
  // }

  // TODO: add all, commit with version message, push including tags
  await git
    .add('package.json')
    .commit(`version ${package.version}`)
    .addAnnotatedTag(`v${package.version}`, `version ${package.version}`)
    .push()
    .pushTags()

  // TODO: create github release

// curl -X POST -u d4lton:de074499351fea159fe82e7a8003fef1b3d86cfe -H "Accept: application/vnd.github.v3+json" https://api.github.com/repos/d4lton/unchain/releases -d '{"tag_name":"v1.0.11","body":"these\nare the changes"}'

  // TODO: upload release artifact (if any)

})();

